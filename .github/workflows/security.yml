name: Security Audit & Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - container
          - secrets

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' || github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: |
          echo "üîç Running pnpm security audit..."
          pnpm audit --audit-level moderate --output-format json > audit-results.json || true
          
          # Display human-readable results
          echo "üìä Audit Summary:"
          pnpm audit --audit-level moderate || echo "Vulnerabilities found"

      - name: Check for high/critical vulnerabilities
        run: |
          echo "üö® Checking for critical vulnerabilities..."
          if pnpm audit --audit-level high; then
            echo "‚úÖ No high or critical vulnerabilities found"
          else
            echo "‚ùå High or critical vulnerabilities detected"
            echo "Please address these vulnerabilities before proceeding"
            exit 1
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: audit-results.json
          retention-days: 30

      - name: Dependency Review (PR only)
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # Code Security Scanning with CodeQL
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' || github.event_name != 'workflow_dispatch'
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript"

  # Secret Scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' || github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Check for hardcoded secrets
        run: |
          echo "üîç Scanning for common secret patterns..."
          
          # Define patterns to search for
          patterns=(
            "password\s*=\s*['\"][^'\"]{8,}['\"]"
            "api_key\s*=\s*['\"][^'\"]{20,}['\"]"
            "secret\s*=\s*['\"][^'\"]{16,}['\"]"
            "token\s*=\s*['\"][^'\"]{20,}['\"]"
            "AKIA[0-9A-Z]{16}"  # AWS Access Key
            "sk_live_[0-9a-zA-Z]{24}"  # Stripe Live Key
            "sk_test_[0-9a-zA-Z]{24}"  # Stripe Test Key
          )
          
          found_secrets=false
          for pattern in "${patterns[@]}"; do
            if grep -r -E "$pattern" --exclude-dir=node_modules --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" .; then
              echo "‚ùå Potential secret found matching pattern: $pattern"
              found_secrets=true
            fi
          done
          
          if [ "$found_secrets" = true ]; then
            echo "üö® Potential secrets detected in codebase!"
            echo "Please review and remove any hardcoded secrets"
            exit 1
          else
            echo "‚úÖ No obvious secrets detected"
          fi

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' || github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: roomicor:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_APP_URL=https://example.com
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_fake
            NEXT_PUBLIC_SUPABASE_URL=https://fake.supabase.co
            NEXT_PUBLIC_SUPABASE_ANON_KEY=fake-anon-key
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_fake
            NEXT_PUBLIC_COPILOTKIT_RUNTIME_URL=/api/copilotkit

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'roomicor:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk Container Test
        uses: snyk/actions/docker@master
        if: ${{ secrets.SNYK_TOKEN }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: roomicor:security-scan
          args: --severity-threshold=high

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && ${{ secrets.SNYK_TOKEN }}
        with:
          sarif_file: snyk.sarif

  # License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' || github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          echo "üìú Checking package licenses..."
          
          # Install license checker
          npm install -g license-checker
          
          # Generate license report
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense;WTFPL;CC0-1.0' --output json > licenses.json || true
          
          # Check for problematic licenses
          if license-checker --failOn 'GPL;LGPL;AGPL;SSPL;BUSL' --summary; then
            echo "‚úÖ All licenses are compliant"
          else
            echo "‚ùå Found non-compliant licenses"
            echo "Please review the following packages:"
            license-checker --failOn 'GPL;LGPL;AGPL;SSPL;BUSL'
            exit 1
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: licenses.json
          retention-days: 30

  # OWASP ZAP Security Testing
  zap-security-test:
    name: OWASP ZAP Security Test
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || (github.event_name == 'schedule')
    services:
      web-app:
        image: node:20-alpine
        ports:
          - 3000:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install and build application
        run: |
          pnpm install --frozen-lockfile
          pnpm build
        env:
          NEXT_PUBLIC_APP_URL: http://localhost:3000
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_fake
          NEXT_PUBLIC_SUPABASE_URL: https://fake.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: fake-anon-key
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_fake
          NEXT_PUBLIC_COPILOTKIT_RUNTIME_URL: /api/copilotkit

      - name: Start application
        run: |
          pnpm start &
          sleep 30
          curl -f http://localhost:3000/api/health

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-security-report
          path: report_html.html
          retention-days: 30

  # Security Summary Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, secret-scan, container-scan, license-check]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Generate security summary
        run: |
          echo "# üîí Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job results
          echo "| Scan Type | Status | Details |" >> security-summary.md
          echo "|-----------|--------|---------|" >> security-summary.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Node.js package vulnerabilities |" >> security-summary.md
          echo "| Code Security | ${{ needs.code-security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | CodeQL static analysis |" >> security-summary.md
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Hardcoded secrets detection |" >> security-summary.md
          echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Docker image vulnerabilities |" >> security-summary.md
          echo "| License Check | ${{ needs.license-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Open source license compliance |" >> security-summary.md
          echo "" >> security-summary.md
          
          # Overall status
          if [[ "${{ needs.dependency-scan.result }}" == "success" && "${{ needs.code-security.result }}" == "success" && "${{ needs.secret-scan.result }}" == "success" && "${{ needs.container-scan.result }}" == "success" && "${{ needs.license-check.result }}" == "success" ]]; then
            echo "## üéâ Overall Status: PASSED" >> security-summary.md
            echo "" >> security-summary.md
            echo "All security scans completed successfully. The application meets security standards." >> security-summary.md
            overall_status="success"
          else
            echo "## üö® Overall Status: FAILED" >> security-summary.md
            echo "" >> security-summary.md
            echo "One or more security scans failed. Please review the detailed reports and address any issues." >> security-summary.md
            overall_status="failure"
          fi
          
          echo "OVERALL_STATUS=$overall_status" >> $GITHUB_ENV

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Notify security team
        if: env.OVERALL_STATUS == 'failure' && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security'
          text: |
            üö® Security scan failures detected!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Please review the security report immediately.
            
            Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: Fail workflow if security issues found
        if: env.OVERALL_STATUS == 'failure'
        run: |
          echo "‚ùå Security issues detected - failing workflow"
          exit 1